[
  {
    "id": 1,
    "title": "Pendahuluan",
    "thumbnail": "https://firebasestorage.googleapis.com/v0/b/gitpedia-prod.appspot.com/o/illustrations%2Fsoftware-code-testing-pana.svg?alt=media&token=d6f37644-2ad6-4c52-88cb-82f1d0b4d220",
    "lessons": [
      {
        "id": 1,
        "title": "Sejarah Singkat Git",
        "content": "Kernel Linux adalah proyek perangkat lunak sumber terbuka dalam lingkup yang cukup besar. Sebagian besar waktu pemeliharaan dari kernel Linux (1991-2002), perubahan-perubahan pada perangkat lunak diberikan sebagai patch dan file arsip. Pada tahun 2002, proyek kernel Linux mulai menggunakan Distributed Version Control System (DVCS) terpatenkan yang bernama BitKeeper. Pada tahun 2005, hubungan antara komunitas yang mengembangkan kernel Linux dengan perusahaan komersial yang mengembangkan BitKeeper terputus, dan status bebas biaya dari alatnya dicabut. Hal ini mendesak komunitas pengembangan Linux (khususnya Linus Torvalds, pencipta Linux) untuk mengembangkan alat mereka sendiri yang dinamakan Git berdasarkan beberapa pelajaran yang telah mereka pelajari ketika menggunakan BitKeeper. Beberapa sasaran dari diciptakannya Git adalah sebagai berikut: \\n - Kecepatan \\n - Desain yang sederhana \\n - Dukungan yang kuat untuk pengembangan non-linier (ribuan cabang paralel) \\n - Sepenuhnya didistribusikan \\n - Mampu menangani proyek besar seperti kernel Linux secara efisien (kecepatan dan ukuran data) \\n \\n Sejak kelahirannya pada tahun 2005, Git telah berevolusi dan berkembang untuk dapat digunakan dengan mudah digunakan namun tetap mempertahankan kualitas awalnya. Git memiliki performa yang sangat cepat, sangat efisien dengan proyek-proyek besar, dan memiliki sistem percabangan yang hebat untuk pengembangan non-linier.",
        "quiz": [
          {
            "id": 1,
            "question": "Siapakah pencipta kernel Linux dan Git?",
            "answer": "Linus Torvalds",
            "options": ["Mark Zuckerberg", "Linus Torvalds", "Bill Gates"],
            "type": "choice"
          },
          {
            "id": 2,
            "question": "Alat apa yang digunakan untuk mengelola perubahan-perubahan pada proyek kernel Linux sebelum Git diciptakan?",
            "answer": "BitKeeper",
            "options": ["BitKeeper", "Subversion", "Mercurial"],
            "type": "choice"
          },
          {
            "id": 3,
            "question": "Manakah yang bukan sasaran dari diciptakannya Git?",
            "answer": "Dukungan yang kuat untuk pengembangan linier",
            "options": [
              "Kecepatan",
              "Desain yang sederhana",
              "Dukungan yang kuat untuk pengembangan linier"
            ],
            "type": "choice"
          },
          {
            "id": 4,
            "question": "Pada tahun berapa Git diciptakan?",
            "answer": "2005",
            "options": ["2004", "2005", "2006"],
            "type": "choice"
          }
        ]
      },
      {
        "id": 2,
        "title": "Pengaturan Git",
        "content": "Git hadir dengan perintah `git config`, dimana pengguna dapat menampilkan dan mengatur variabel-variabel pengaturan yang mengatur semua aspek tampilan dan pengoperasian Git. Pengguna dapat mengatur variabel pengaturan sekali saja jika menggunakan opsi `--global`, karena telah disimpan secara global sehingga Git akan selalu menggunakan informasi yang pengguna masukkan untuk proyek apa pun yang terdapat pada komputer pengguna. Jika pengguna ingin mengatur variabel pengaturan hanya untuk satu proyek saja, pengguna dapat menggunakan opsi `--local` saat pengguna berada dalam proyek tersebut. \\n ### Identitas Pengguna \\n Hal pertama yang harus dilakukan pertama kali adalah mengatur nama dan alamat email pengguna. Hal ini penting karena setiap commit pada Git akan menggunakan informasi ini, dan informasi ini disimpan secara permanen ke dalam commit yang telah pengguna buat. Pengguna dapat mengatur identitasnya menggunakan perintah berikut: \\n ``` \\n $ git config --global user.name \"<nama>\" \\n $ git config --global user.email \"<email>\" \\n ``` \\n Contoh: \\n ``` \\n $ git config --global user.name \"John Doe\" \\n $ git config --global user.email \"john.doe@example.com\" \\n ``` \\n ### Text Editor \\n Setelah identitas diatur, pengguna dapat mengatur text editor yang akan digunakan ketika Git membutuhkan pengguna untuk mengetik pesan. Jika tidak diatur, maka secara otomatis Git akan menggunakan text editor bawaan komputer pengguna. Jika pengguna ingin menggunakan text editor lain, pengguna dapat menggunakan perintah berikut: \\n ``` \\n $ git config --global core.editor \"<text_editor>\" \\n ``` \\n Contoh: \\n ``` \\n $ git config --global core.editor \"vim\" \\n ``` \\n ### Nama Branch \\n Secara default, Git akan membuat branch utama bernama `master` saat pengguna membuat repositori baru. Mulai dari Git versi 2.28 dan seterusnya, pengguna dapat menetapkan nama yang berbeda untuk branch utama. Jika pengguna ingin mengatur nama branch utama, pengguna dapat menggunakan perintah berikut: \\n ``` \\n $ git config --global init.defaultBranch <nama_branch> \\n ``` \\n Contoh: \\n ``` \\n $ git config --global init.defaultBranch main \\n ``` \\n ### Memeriksa Pengaturan \\n Jika pengguna ingin menampilkan daftar pengaturan Git yang terdapat pada komputernya secara keseluruhan, pengguna dapat menggunakan perintah berikut: \\n ``` \\n $ git config --list \\n ``` \\n Selain itu, pengguna juga dapat memeriksa pengaturan Git dengan menentukan objek pengaturan yang ingin ditampilkan. Jika pengguna ingin menampilkan pengaturan Git secara spesifik, pengguna dapat menggunakan perintah berikut: \\n ``` \\n $ git config <objek> \\n ``` \\n Contoh: \\n ``` \\n $ git config user.name \\n ```",
        "quiz": [
          {
            "id": 1,
            "question": "Jika seorang pengguna yang bernama Tony Stark ingin mengatur namanya agar tersimpan pada pengaturan Git secara global, perintah apa yang harus dijalankan?",
            "answer": "git config --global user.name \"Tony Stark\"",
            "type": "fill"
          },
          {
            "id": 2,
            "question": "Jika pengguna ingin mengatur nama branch utama dengan nama `main` pada pengaturan Git secara global, perintah apa harus dijalankan?",
            "answer": "git config --global init.defaultBranch main",
            "type": "fill"
          },
          {
            "id": 3,
            "question": "Jika pengguna ingin menampilkan daftar pengaturan Git yang terdapat pada komputernya secara keseluruhan, perintah apa yang harus dijalankan?",
            "answer": "git config --list",
            "type": "fill"
          },
          {
            "id": 4,
            "question": "Jika pengguna ingin menampilkan objek nama pada pengaturan Git yang terdapat pada komputernya secara spesifik, perintah apa yang harus dijalankan?",
            "answer": "git config user.name",
            "type": "fill"
          },
          {
            "id": 5,
            "question": "Jika pengguna ingin mengatur variabel pengaturan Git untuk satu proyek saja, apakah opsi yang dapat digunakan oleh pengguna?",
            "answer": "--local",
            "options": ["--global", "--local", "--help"],
            "type": "choice"
          },
          {
            "id": 6,
            "question": "Jika pengguna belum pernah mengatur nama branch utama pada pengaturan Git, apakah nama default dari branch utama yang dibuat oleh Git ketika pengguna membuat repositori baru?",
            "answer": "master",
            "options": ["master", "main", "production"],
            "type": "choice"
          }
        ]
      }
    ]
  },
  {
    "id": 2,
    "title": "Dasar-Dasar Git",
    "thumbnail": "https://firebasestorage.googleapis.com/v0/b/gitpedia-prod.appspot.com/o/illustrations%2Flow-code-development-pana.svg?alt=media&token=373d5072-db0a-41c0-ac98-4b8a9fb3c078",
    "lessons": [
      {
        "id": 1,
        "title": "Membuat Repositori Git",
        "content": "Pengguna dapat membuat repositori Git pada komputernya dengan dua cara, yaitu menginisialisasi direktori lokal menjadi repositori Git atau menduplikat repositori Git yang telah ada dari sebuah server (seperti GitHub, GitLab, dan lainnya). \\n ### Menginisialisasi repositori pada direktori lokal \\n Jika pengguna memiliki proyek pada direktori lokal yang belum menggunakan kontrol versi dan ingin mulai mengontrolnya dengan Git, pengguna harus masuk ke direktori lokal tersebut kemudian gunakan perintah berikut: \\n ``` \\n $ git init \\n ``` \\n Perintah ini akan membuat subdirektori baru bernama `.git` yang merupakan direktori tersembunyi yang berisi informasi dan metadata penting mengenai repositori Git. \\n ### Menduplikat repositori Git yang telah ada \\n Jika pengguna ingin menduplikat repositori yang telah ada dari sebuah server ke dalam komputernya, pengguna dapat menggunakan perintah berikut: \\n ``` \\n $ git clone <url> \\n ``` \\n Contoh: \\n ``` \\n $ git clone https://github.com/gojek/heimdall \\n ``` \\n Perintah tersebut secara otomatis akan membuat direktori lokal dengan nama yang sama seperti yang ada di server, menginisialisasi direktori `.git` di dalamnya, menarik semua data pada repositori tersebut, dan memeriksa salinan pekerjaan dari versi terbaru. Jika pengguna masuk ke direktori tersebut, pengguna dapat melihat file-file proyek yang telah diduplikat dan siap untuk digunakan.",
        "quiz": [
          {
            "id": 1,
            "question": "Jika pengguna ingin menginisialisasi direktori lokal menjadi repositori Git, perintah apa yang harus dijalankan?",
            "answer": "git init",
            "type": "fill"
          },
          {
            "id": 2,
            "question": "Jika pengguna ingin menduplikat sebuah repositori Git yang telah ada dari GitHub dan url repositori tersebut adalah `https://github.com/gojek/heimdall`, perintah apa yang harus dijalankan?",
            "answer": "git clone https://github.com/gojek/heimdall",
            "type": "fill"
          },
          {
            "id": 3,
            "question": "Manakah yang bukan cara praktis untuk membuat repositori Git?",
            "answer": "Mengunduh repositori Git dalam bentuk zip dari sebuah server",
            "options": [
              "Mengunduh repositori Git dalam bentuk zip dari sebuah server",
              "Menduplikat repositori Git yang telah ada dari sebuah server",
              "Menginisialisasi repositori Git pada direktori lokal"
            ]
          },
          {
            "id": 4,
            "question": "Apakah fungsi utama dari subdirektori `.git`?",
            "answer": "Menyimpan informasi dan metadata penting tentang repository Git",
            "options": [
              "Menyimpan informasi dan metadata penting tentang repository Git",
              "Sebagai arsip untuk menyimpan semua file proyek yang tidak digunakan",
              "Sebagai penanda bahwa direktori tersebut merupakan repositori Git"
            ],
            "type": "choice"
          }
        ]
      },
      {
        "id": 2,
        "title": "Merekam Perubahan ke Repositori",
        "content": "![Git Lifecycle](https://git-scm.com/book/en/v2/images/lifecycle.png) \\n Setiap file pada sebuah repositori dapat berada di antara dua kondisi, yaitu terlacak (tracked) atau tidak terlacak (untracked). Singkatnya, file yang terlacak adalah file yang telah berada di dalam staging area maupun commit terakhir, sedangkan file yang tidak terlacak sebaliknya. Staging area merupakan bagian dari Git yang digunakan untuk menyimpan perubahan pada file yang akan di-commit ke dalam riwayat repositori. File yang terlacak dapat memiliki status yang berbeda, yaitu unmodified, modified, maupun staged. \\n ### Memeriksa status file pada repositori \\n Untuk menampilkan status dari file-file yang terdapat pada sebuah repositori, pengguna dapat menggunakan perintah berikut: \\n ``` \\n $ git status \\n ``` \\n ### Melacak file baru pada repositori \\n Untuk mulai melacak file yang belum terlacak ke staging area, pengguna dapat menggunakan perintah berikut: \\n ``` \\n git add <file> \\n ``` \\n Contoh: \\n ``` \\n $ git add README.md \\n ``` \\n Jika pengguna memiliki banyak file yang belum terlacak dan pengguna ingin melacak semua file tersebut ke dalam staging area secara sekaligus, pengguna dapat menggunakan perintah berikut: \\n ``` \\n $ git add . \\n ``` \\n Setelah menjalankan perintah tersebut, pengguna dapat memeriksa status file pada repositori kembali untuk memastikan bahwa file tersebut telah terlacak dan masuk ke staging area untuk dilakukan commit. \\n ### Commit perubahan yang dilakukan \\n Pada tahap ini, pengguna dapat melakukan commit perubahan pada file-file yang telah masuk ke staging area. Sebelum melakukan commit, sebaiknya periksa status file pada repositori terlebih dahulu untuk melihat file apa saja yang berada di staging area. Pengguna dapat melakukan commit perubahan dengan perintah berikut: \\n ``` \\n git commit -m \"<pesan>\" \\n ``` \\n Contoh: \\n ``` \\n $ git commit -m \"Menambahkan README\" \\n ``` \\n Setiap kali pengguna menjalankan perintah ini, pengguna melakukan commit perubahan ke dalam riwayat repositori dalam bentuk versi dan versi tersebut dapat dikembalikan atau dibandingkan di waktu yang akan datang.",
        "quiz": [
          {
            "id": 1,
            "question": "Jika pengguna ingin menampilkan status dari file-file yang terdapat pada sebuah repositori, perintah apa yang harus dijalankan?",
            "answer": "git status",
            "type": "fill"
          },
          {
            "id": 2,
            "question": "Jika pengguna ingin melacak semua file yang belum terlacak ke dalam staging area secara sekaligus, perintah apa yang harus dijalankan?",
            "answer": "git add .",
            "type": "fill"
          },
          {
            "id": 3,
            "question": "Jika pengguna ingin melacak file yang bernama `README.md` ke dalam staging area, perintah apa yang harus dijalankan?",
            "answer": "git add README.md",
            "type": "fill"
          },
          {
            "id": 4,
            "question": "Jika pengguna ingin melakukan commit perubahan pada file-file yang berada di dalam staging area dengan memberi pesan \"Menambahkan beberapa komponen dashboard\", perintah apa yang harus dijalankan?",
            "answer": "git commit -m \"Menambahkan beberapa komponen dashboard\"",
            "type": "fill"
          },
          {
            "id": 5,
            "question": "Manakah yang bukan jenis status file pada repositori Git?",
            "answer": "Untracked",
            "options": ["Modified", "Staged", "Untracked"],
            "type": "choice"
          },
          {
            "id": 6,
            "question": "Apakah fungsi dari staging area?",
            "answer": "Menyimpan perubahan pada file yang akan di-commit ke dalam riwayat repositori",
            "options": [
              "Menyimpan perubahan pada file yang akan di-commit ke dalam riwayat repositori",
              "Menyimpan perubahan pada file yang akan dihapus dari riwayat repositori",
              "Menyimpan perubahan pada file yang akan diubah dari riwayat repositori"
            ]
          }
        ]
      },
      {
        "id": 3,
        "title": "Membatalkan Suatu Hal",
        "content": "Pada tahap tertentu, pengguna mungkin ingin membatalkan suatu hal yang telah dilakukan sebelumnya. Contoh pembatalan yang umum terjadi adalah ketika pengguna melakukan commit perubahan terlalu dini dan lupa menambahkan beberapa file pada commit tersebut, atau pengguna menuliskan pesan commit yang salah. Jika pengguna ingin mengulangi commit tersebut, hal yang perlu dilakukan adalah membuat perubahan baru, lacak perubahan tersebut ke staging area, dan commit kembali dengan menambahkan opsi `--amend` seperti perintah berikut: \\n ``` \\n $ git commit --amend -m \"<pesan>\" \\n ``` \\n Contoh: \\n ``` \\n $ git commit --amend -m \"Menambahkan README\" \\n ``` \\n Perintah ini mengambil semua perubahan file yang terdapat pada staging area untuk di-commit ulang. Jika pengguna tidak membuat perubahan apa pun, commit ini akan terlihat sama persis seperti sebelumnya, dan yang akan terubah hanyalah pesan dari commit tersebut. \\n ### Membatalkan file dari staging area \\n Jika pengguna tidak sengaja memasukkan suatu file ke dalam staging area dan ingin membatalkannya, pengguna dapat menggunakan perintah berikut: \\n ``` \\n $ git restore --staged <file> \\n ``` \\n Contoh: \\n ``` \\n $ git restore --staged README.md \\n ``` \\n Pengguna juga dapat membatalkan semua file yang berada dalam staging area dengan menggunakan perintah berikut: \\n ``` \\n $ git restore --staged . \\n ``` \\n ### Membatalkan perubahan file \\n Jika pengguna tidak ingin menyimpan perubahan yang baru saja dilakukan pada file tertentu dan ingin mengembalikannya seperti yang terdapat pada commit terakhir, pengguna dapat menggunakan perintah berikut: \\n ``` \\n $ git restore <file> \\n ``` \\n Contoh: \\n ``` \\n $ git restore README.md \\n ``` \\n Pengguna juga dapat membatalkan perubahan pada semua file yang telah diubah dengan menggunakan perintah berikut: \\n ``` \\n $ git restore . \\n ```",
        "quiz": [
          {
            "id": 1,
            "question": "Jika pengguna ingin mengubah pesan pada commit terakhirnya menjadi \"Menambahkan komponen profile\", perintah apa yang harus dijalankan?",
            "answer": "git commit --amend -m \"Menambahkan komponen profile\"",
            "type": "fill"
          },
          {
            "id": 2,
            "question": "Jika pengguna ingin membatalkan semua file yang berada dalam staging area, perintah apa yang harus dijalankan?",
            "answer": "git restore --staged .",
            "type": "fill"
          },
          {
            "id": 3,
            "question": "Jika pengguna ingin membatalkan perubahan pada file yang bernama `README.md`, perintah apa yang harus dijalankan?",
            "answer": "git restore README.md",
            "type": "fill"
          },
          {
            "id": 4,
            "question": "Apakah perbedaan antara perintah `git restore --staged` dengan `git restore`?",
            "answer": "Perintah `git restore --staged` digunakan untuk membatalkan file dari staging area, sedangkan perintah `git restore` digunakan untuk membatalkan perubahan pada file",
            "options": [
              "Perintah `git restore --staged` digunakan untuk membatalkan file dari staging area, sedangkan perintah `git restore` digunakan untuk membatalkan perubahan pada file",
              "Perintah `git restore --staged` digunakan untuk membatalkan perubahan pada file, sedangkan perintah `git restore` digunakan untuk membatalkan file dari staging area",
              "Tidak ada perbedaan antara kedua perintah tersebut"
            ]
          }
        ]
      },
      {
        "id": 4,
        "title": "Bekerja dengan Remote",
        "content": "Untuk dapat berkolaborasi dalam sebuah proyek, pengguna perlu mengetahui cara mengelola repositori remote. Repositori remote adalah proyek pengguna yang di-hosting pada suatu server (seperti GitHub, GitLab, dan lainnya). Berkolaborasi dengan pengguna lain melibatkan pengelolaan repositori remote dengan melakukan push maupun pull data ketika pengguna perlu berbagi pekerjaan. \\n ### Menampilkan server repositori remote \\n Pengguna dapat melihat daftar server yang terhubung dengan suatu repositori remote dengan menampilkan nama alias dan url dari setiap server yang terhubung. Jika pengguna menduplikat sebuah repositori remote dari sebuah server, maka server tersebut secara default akan diberikan nama alias `origin`. Untuk menampilkan semua nama alias beserta url server yang terhubung, pengguna dapat menggunakan perintah berikut: \\n ``` \\n $ git remote -v \\n ``` \\n ### Menambahkan repositori remote \\n Untuk menambahkan repositori remote pada direktori lokal, pengguna dapat menggunakan perintah berikut: \\n ``` \\n $ git remote add <alias> <url> \\n ``` \\n Contoh: \\n ``` \\n $ git remote add test https://github.com/gojek/heimdall \\n ``` \\n Setelah menggunakan perintah tersebut, pengguna dapat menggunakan nama alias yang telah ditentukan pada baris perintah sebagai alias dari url server tersebut. \\n ### Fetch dan pull data dari repositori remote \\n Untuk melakukan fetch data dari repositori remote, pengguna dapat menggunakan perintah berikut: \\n ``` \\n $ git fetch \\n ``` \\n Perintah ini menarik data apa pun yang telah di-push ke repositori remote tersebut sejak pengguna menduplikatnya. Tetapi, perintah ini tidak secara otomatis menggabungkannya dengan data yang terdapat pada direktori lokal. Pengguna harus menggabungkannya secara manual ke dalam direktori lokal jika pengguna menginginkannya. Jika pengguna ingin menarik data sekaligus menggabungkannya secara otomatis dari repositori remote ke dalam direktori lokal, pengguna dapat menggunakan perintah berikut: \\n ``` \\n $ git pull \\n ``` \\n Perintah ini mungkin membuat alur kerja menjadi lebih mudah atau lebih nyaman untuk pengguna. Perintah ini umumnya menarik data dari server tempat pengguna menduplikat dan secara otomatis menggabungkannya ke dalam pekerjaan pengguna jika tidak terdapat konflik. \\n ### Push data ke repositori remote \\n Ketika pengguna ingin melakukan push data ke repositori remote, pengguna dapat menggunakan perintah berikut: \\n ``` \\n $ git push \\n ``` \\n Perintah ini hanya berfungsi jika pengguna memiliki akses untuk mengubah repositori remote tersebut dan jika tidak ada pengguna lain yang melakukan push untuk sementara. Jika pengguna lain telah melakukan push terlebih dahulu, maka push yang dilakukan pengguna akan ditolak. Pengguna harus menarik data pekerjaan pengguna lainnya terlebih dahulu dan menggabungkannya ke dalam direktori lokal sebelum diizinkan untuk melakukan push kembali.",
        "quiz": [
          {
            "id": 1,
            "question": "Jika pengguna ingin menampilkan daftar server yang terhubung dengan suatu repositori remote, perintah apa yang harus dijalankan?",
            "answer": "git remote -v",
            "type": "fill"
          },
          {
            "id": 2,
            "question": "Jika pengguna ingin menambahkan repositori remote dengan nama alias `test` dan url `https://github.com/gojek/heimdall`, perintah apa yang harus dijalankan?",
            "answer": "git remote add test https://github.com/gojek/heimdall",
            "type": "fill"
          },
          {
            "id": 3,
            "question": "Jika pengguna ingin menarik data dari repositori remote tanpa menggabungkan secara otomatis ke dalam direktori lokal, perintah apa yang harus dijalankan?",
            "answer": "git fetch",
            "type": "fill"
          },
          {
            "id": 4,
            "question": "Jika pengguna ingin menarik data dari repositori remote dan menggabungkannya secara otomatis ke dalam direktori lokal, perintah apa yang harus dijalankan?",
            "answer": "git pull",
            "type": "fill"
          },
          {
            "id": 5,
            "question": "Jika pengguna ingin melakukan push data ke repositori remote, perintah apa yang harus dijalankan?",
            "answer": "git push",
            "type": "fill"
          }
        ]
      }
    ]
  },
  {
    "id": 3,
    "title": "Percabangan pada Git",
    "thumbnail": "https://firebasestorage.googleapis.com/v0/b/gitpedia-prod.appspot.com/o/illustrations%2Fversion-control-pana.svg?alt=media&token=1e231e28-fd1d-4028-a97a-fbd9a9895841",
    "lessons": [
      {
        "id": 1,
        "title": "Percabangan dan Penggabungan",
        "content": "Hampir setiap sistem kontrol versi memiliki beberapa bentuk dukungan percabangan atau biasa disebut dengan branching. Branching berarti pengguna beralih dari branch utama proyek dan melakukan pekerjaan pada branch lain tanpa mengubah pekerjaan pada branch utama. \\n ### Percabangan Dasar \\n Pengguna biasanya membuat branch baru ketika ingin mengerjakan pekerjaan yang terpisah dari branch utama seperti penambahan fitur, perbaikan isu, dan lainnya. Untuk membuat branch baru dan beralih ke branch tersebut, pengguna dapat menggunakan kedua perintah berikut: \\n ``` \\n $ git branch <branch_baru> \\n $ git checkout <branch_baru> \\n ``` \\n Contoh: \\n ``` \\n $ git branch development \\n $ git checkout development \\n ``` \\n Atau pengguna juga dapat melakukan kedua hal tersebut hanya dengan satu perintah dengan menggunakan perintah berikut: \\n ``` \\n $ git checkout -b <branch_baru> \\n ``` \\n Contoh: \\n ``` \\n $ git checkout -b development \\n ``` \\n Jika pengguna ingin menghapus branch, pengguna dapat menggunakan perintah berikut: \\n ``` \\n $ git branch -d <nama_branch> \\n ``` \\n Contoh: \\n ``` \\n $ git branch -d development \\n ``` \\n ### Penggabungan Dasar \\n Pengguna biasanya melakukan penggabungan branch ketika pengguna telah memutuskan bahwa pekerjaannya pada suatu branch telah selesai dan siap untuk digabungkan ke branch yang dituju. Untuk melakukan hal tersebut, pengguna dapat beralih ke branch yang dituju kemudian gabungkan branch asal dengan menggunakan perintah berikut: \\n ``` \\n $ git checkout <branch_tujuan> \\n $ git merge <branch_asal> \\n ``` \\n Contoh: \\n ``` \\n $ git checkout master \\n $ git merge development \\n ```",
        "quiz": [
          {
            "id": 1,
            "question": "Jika pengguna ingin membuat branch baru dengan nama `development` dan beralih ke branch tersebut dengan satu perintah, perintah apa yang harus dijalankan?",
            "answer": "git checkout -b development",
            "type": "fill"
          },
          {
            "id": 2,
            "question": "Jika pengguna ingin menghapus suatu branch yang bernama `development`, perintah apa yang harus dijalankan?",
            "answer": "git branch -d development",
            "type": "fill"
          },
          {
            "id": 3,
            "question": "Jika pengguna ingin berpindah branch ke branch yang bernama `master`, perintah apa yang harus dijalankan?",
            "answer": "git checkout master",
            "type": "fill"
          },
          {
            "id": 4,
            "question": "Jika pengguna ingin menggabungkan branch yang bernama `development` ke branch yang sedang ditempati pengguna saat ini, perintah apa yang harus dijalankan?",
            "answer": "git merge development",
            "type": "fill"
          }
        ]
      },
      {
        "id": 2,
        "title": "Manajemen Branch",
        "content": "Setelah pengguna membuat, menggabungkan, dan menghapus branch, pengguna dapat menampilkan daftar branch yang terdapat pada repositori dengan menggunakan perintah berikut: \\n ``` \\n $ git branch \\n ``` \\n Untuk menampilkan daftar branch beserta commit terakhir pada setiap branch, pengguna dapat menggunakan perintah berikut: \\n ``` \\n $ git branch -v \\n ``` \\n Untuk menampilkan daftar branch yang telah digabungkan ke dalam branch yang sedang ditempati oleh pengguna saat ini, pengguna dapat menggunakan perintah berikut: \\n ``` \\n $ git branch --merged \\n ``` \\n Untuk menampilkan daftar branch yang belum pernah digabungkan sama sekali, pengguna dapat menggunakan perintah berikut: \\n ``` \\n $ git branch --no-merged \\n ``` \\n ### Mengubah nama branch \\n Pengguna dapat mengubah nama branch dengan menggunakan perintah berikut: \\n ``` \\n $ git branch --move <branch_lama> <branch_baru> \\n ``` \\n Contoh: \\n ``` \\n $ git branch --move master main \\n ``` \\n Perintah ini mengubah nama branch yang lama dengan nama branch yang baru. Tetapi, perintah ini hanya mengubah nama branch secara lokal pada komputer pengguna. Untuk mengubah nama branch yang ada di server, pengguna perlu melakukan push nama branch yang baru tersebut ke server dengan menggunakan perintah berikut: \\n ``` \\n $ git push --set-upstream origin <branch_baru> \\n ``` \\n Contoh: \\n ``` \\n $ git push --set-upstream origin main \\n ``` \\n Kemudian, pengguna dapat menghapus branch yang lama pada server dengan menggunakan perintah berikut: \\n ``` \\n $ git push origin --delete <branch_nama> \\n ``` \\n Contoh: \\n ``` \\n $ git push origin --delete master \\n ```",
        "quiz": [
          {
            "id": 1,
            "question": "Jika pengguna ingin menampilkan daftar branch yang terdapat pada repositori, perintah apa yang harus dijalankan?",
            "answer": "git branch",
            "type": "fill"
          },
          {
            "id": 2,
            "question": "Jika pengguna ingin menampilkan daftar branch yang telah digabungkan ke dalam branch yang sedang ditempati pengguna saat ini, perintah apa yang harus dijalankan?",
            "answer": "git branch --merged",
            "type": "fill"
          },
          {
            "id": 3,
            "question": "Jika pengguna ingin menampilkan daftar branch yang belum pernah digabungkan sama sekali, perintah apa yang harus dijalankan?",
            "answer": "git branch --no-merged",
            "type": "fill"
          },
          {
            "id": 4,
            "question": "Jika pengguna ingin mengubah nama branch yang bernama `master` menjadi `main`, perintah apa yang harus dijalankan?",
            "answer": "git branch --move master main",
            "type": "fill"
          }
        ]
      }
    ]
  }
]
